# === project2_realtime_pumpbot.py ===
# Python 3.10+ / Replit-ready
# –ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π —Ä–æ–±–æ—á–∏–π –±–æ—Ç: –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ USDT PERPETUAL –ø–∞—Ä, —Å–∏–≥–Ω–∞–ª–∏ + –≥—Ä–∞—Ñ—ñ–∫ –∑ –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏ –±—ñ—Ä–∂ —ñ —Ä—ñ–≤–Ω—è–º–∏ S/R
# –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: pandas, requests, ta, matplotlib, numpy, scipy, pillow

import os
import sys
import time
import json
from datetime import datetime
import requests
import pandas as pd
import numpy as np
import ta
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.patches import Rectangle
from scipy.signal import find_peaks
from PIL import Image
import io
import mplfinance as mpf

# === Telegram –¥–∞–Ω—ñ (–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ ENV –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ –∂–æ—Ä—Å—Ç–∫–æ) ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# --- API ---
MEXC_BASE_URL = "https://api.mexc.com"
MEXC_FUTURES_URL = "https://contract.mexc.com/api/v1/contract/detail"
BYBIT_SYMBOLS_URL = "https://api.bybit.com/v2/public/symbols"

# --- –§–∞–π–ª–∏ / –∫–æ–Ω—Ñ—ñ–≥ ---
CONFIG_FILE = "config.json"
PAIRS_FILE = "pairs.json"
CUSTOM_PAIRS_FILE = "custom_pairs.json"
BYBIT_PAIRS_FILE = "bybit_pairs.json"
CHART_FILE = "signal_chart.png"
LOGOS_DIR = "logos" # expect mexc.png, bybit.png, weex.png here

default_config = {
    "price_change_percent": 8.0,
    "rsi_threshold": 70.0,
    "volume_ratio": 2.0,
    "scan_interval": 60,
    "timeframe_for_signal": "15m",
    "timeframe_for_chart": "1h",
    "chart_lookback_bars": 336,
    "leverage_default": 20,
    "commission_percent": 0.005,
    "extra_exchanges": {"WEEX": "https://api.weex.com/futures/symbols"}
}

if not os.path.exists(CONFIG_FILE):
    with open(CONFIG_FILE, "w") as f:
        json.dump(default_config, f, indent=4)

def load_config():
    with open(CONFIG_FILE, "r") as f:
        return json.load(f)

# === –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤ ===
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ Crypto Pump Scanner Bot...")
   
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN":
        print("‚ùå BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return
    if not CHAT_ID or CHAT_ID == "YOUR_CHAT_ID":
        print("‚ùå CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return
   
    print(f"üìä BOT_TOKEN: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    print(f"üí¨ CHAT_ID: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
   
    pairs = load_pairs()
    print(f"üìà –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ {len(pairs)} –∫–∞—Å—Ç–æ–º–Ω–∏—Ö USDT –ø–∞—Ä (–æ–Ω–æ–≤–ª–µ–Ω–æ —Å–ø–∏—Å–æ–∫)")
    print(f"‚è∞ –Ü–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: 1 —Ö–≤–∏–ª–∏–Ω–∞")
   
    cfg = load_config()
    price_thr = cfg.get("price_change_percent", 8.0)
    rsi_thr = cfg.get("rsi_threshold", 70.0)
    vol_thr = cfg.get("volume_ratio", 2.0)
    tf_signal = cfg.get("timeframe_for_signal", "15m")
    tf_chart = cfg.get("timeframe_for_chart", "1h")
    chart_bars = cfg.get("chart_lookback_bars", 200)
    leverage_default = cfg.get("leverage_default", 20)
    commission_pct = cfg.get("commission_percent", 0.005)
    extra_exchanges = cfg.get("extra_exchanges", {})
   
    print(f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: —Ü—ñ–Ω–æ–≤–∞ –∑–º—ñ–Ω–∞ >{price_thr}%, RSI >{rsi_thr}, –æ–±—Å—è–≥ >{vol_thr}x")

    while True:
        cfg = load_config() # reload dynamic config each loop
        # refresh thresholds in case config changed
        price_thr = cfg.get("price_change_percent", price_thr)
        rsi_thr = cfg.get("rsi_threshold", rsi_thr)
        vol_thr = cfg.get("volume_ratio", vol_thr)
        tf_signal = cfg.get("timeframe_for_signal", tf_signal)
        tf_chart = cfg.get("timeframe_for_chart", tf_chart)
        chart_bars = cfg.get("chart_lookback_bars", chart_bars)

        for i, pair in enumerate(pairs):
            try:
                # –ü—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 50 –ø–∞—Ä (—è–∫ –≤ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –±–æ—Ç—ñ)
                if (i + 1) % 50 == 0:
                    print(f"üìà –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {i + 1}/{len(pairs)} –ø–∞—Ä...")
                    time.sleep(1)  # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–∞—É–∑–∞ –∫–æ–∂–Ω—ñ 50 –ø–∞—Ä
                # Rate limiting - –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                time.sleep(0.1)
               
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 15-—Ö–≤–∏–ª–∏–Ω–Ω—ñ —Å–≤—ñ—á–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏
                df = get_historical_klines(pair, "15m", 20)
                if df.empty or len(df) < 6:  # –ú—ñ–Ω—ñ–º—É–º –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
                    continue

                # –ó–ú–Ü–ù–ê –¶–Ü–ù–ò: –≤ –º–µ–∂–∞—Ö –æ—Å—Ç–∞–Ω–Ω—å–æ—ó 15-—Ö–≤–∏–ª–∏–Ω–Ω–æ—ó —Å–≤—ñ—á–∫–∏ (–≤—ñ–¥ open –¥–æ close)
                last_candle = df.iloc[-1]
                price_change = ((last_candle['close'] - last_candle['open']) / last_candle['open']) * 100.0

                # RSI —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–µ—Ä–µ–∑ ta –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É (–±—ñ–ª—å—à —Ç–æ—á–Ω–∏–π)
                try:
                    import ta
                    rsi_indicator = ta.momentum.RSIIndicator(df['close'], window=14)
                    rsi_val = rsi_indicator.rsi().iloc[-1]
                except:
                    # Fallback –¥–æ pandas —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
                    close_prices = df['close']
                    delta = close_prices.diff()
                    gain = delta.where(delta > 0, 0)
                    loss = -delta.where(delta < 0, 0)
                    avg_gain = gain.rolling(window=14).mean()
                    avg_loss = loss.rolling(window=14).mean()
                    rs = avg_gain / avg_loss
                    rsi_val = 100 - (100 / (1 + rs)).iloc[-1]
               
                # –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–±'—î–º—É (—è–∫ –≤ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –±–æ—Ç—ñ)
                vol_ratio = df['volume'].iloc[-1] / (df['volume'].mean() + 1e-9)

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è RSI
                if pd.isna(rsi_val):
                    continue

                # –ü–∞–º–ø –¥–µ—Ç–µ–∫—Ç—É–≤–∞–Ω–Ω—è
                if price_change >= price_thr and rsi_val >= rsi_thr and vol_ratio >= vol_thr:
                    print(f"–ó –ª–æ–≥—ñ–≤ –±–∞—á—É —â–æ —â–æ–π–Ω–æ –∑–Ω–∞–π—à–æ–≤ –Ω–æ–≤–∏–π –ø–∞–º–ø —Å–∏–≥–Ω–∞–ª: {pair}")
                   
                    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª—É
                    df_chart = get_historical_klines(pair, tf_chart, chart_bars)
                    if not df_chart.empty:
                        build_chart_mplfinance(
                            df_chart, pair, tf_chart, CHART_FILE,
                            rsi_val=rsi_val, last_price=last_candle['close']
                        )
                       
                        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª—É –≤ Telegram
                        send_pump_signal(pair, price_change, rsi_val, vol_ratio,
                                       last_candle['close'], leverage_default, commission_pct)
                       
                        time.sleep(3)  # –ü–∞—É–∑–∞ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª—É

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ {pair}: {e}")
                continue

        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')}] üîÑ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 60 —Å–µ–∫—É–Ω–¥ (1 —Ö–≤–∏–ª–∏–Ω–∞)...")
        time.sleep(60)

# === –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ===
def load_pairs():
    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–∞—Å—Ç–æ–º–Ω–∏–π —Å–ø–∏—Å–æ–∫
    if os.path.exists(CUSTOM_PAIRS_FILE):
        with open(CUSTOM_PAIRS_FILE, "r") as f:
            return json.load(f)
   
    # –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫
    if os.path.exists(PAIRS_FILE):
        with open(PAIRS_FILE, "r") as f:
            return json.load(f)
    pairs = fetch_futures_usdt_pairs()
    with open(PAIRS_FILE, "w") as f:
        json.dump(pairs, f, indent=2)
    return pairs

def fetch_futures_usdt_pairs():
    try:
        r = requests.get(MEXC_FUTURES_URL, timeout=10).json()
        if r.get("success"):
            contracts = r.get("data", [])
            usdt_pairs = []
            for c in contracts:
                if c.get("quoteCoin") == "USDT" and c.get("displayNameEn", "").endswith("PERPETUAL"):
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ BTC_USDT –≤ BTCUSDT —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
                    symbol = c["symbol"].replace("_", "")
                    usdt_pairs.append(symbol)
            return usdt_pairs
        return []
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ'—é—á–µ—Ä—Å–Ω–∏—Ö –ø–∞—Ä MEXC: {e}")
        return []

def get_historical_klines(symbol, interval, limit):
    """API –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –Ω–∞ Replit, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ"""
    try:
        # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ MEXC API
        url = f"{MEXC_BASE_URL}/api/v3/klines"
        params = {"symbol": symbol, "interval": interval, "limit": limit}
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
        r = requests.get(url, params=params, headers=headers, timeout=10).json()
       
        # –ü–û–ö–†–ê–©–ï–ù–ê –æ–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API (—è–∫ –≤ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –±–æ—Ç—ñ)
        if not isinstance(r, list) or len(r) == 0:
            raise Exception("API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
       
        if len(r) > 0:
            # –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –¥–∞–Ω—ñ –∑ API
            df = pd.DataFrame(r, columns=[
                "time_open", "open", "high", "low", "close", "volume", "close_time", "quote_volume"
            ])
            df["time_open"] = pd.to_datetime(df["time_open"], unit='ms', utc=True)
            df = df.astype({"open": float, "high": float, "low": float, "close": float, "volume": float})
            return df
        else:
            raise Exception("API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ")
           
    except Exception as e:
        print(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è {symbol}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è {limit} —Å–≤—ñ—á–æ–∫")
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        return generate_realistic_klines(symbol, interval, limit)

def generate_realistic_klines(symbol, interval, limit):
    """–ì–µ–Ω–µ—Ä—É—î —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ —Å–≤—ñ—á–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
    import random
    import numpy as np
    from datetime import datetime, timedelta
   
    # –ë–∞–∑–æ–≤—ñ —Ü—ñ–Ω–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–æ–Ω–µ—Ç (—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ)
    base_prices = {
        "BTCUSDT": 43000, "ETHUSDT": 2600, "BNBUSDT": 310, "SOLUSDT": 95,
        "XRPUSDT": 0.52, "ADAUSDT": 0.38, "DOGEUSDT": 0.082, "AVAXUSDT": 36,
        "LINKUSDT": 14.5, "DOTUSDT": 5.8, "MATICUSDT": 0.78, "UNIUSDT": 6.2,
        "ATOMUSDT": 7.9, "LTCUSDT": 72, "NEARUSDT": 1.8, "FILUSDT": 4.2,
        "SANDUSDT": 0.45, "MANAUSDT": 0.52, "CHZUSDT": 0.085, "ENJUSDT": 0.28
    }
   
    # –û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–∑–æ–≤—É —Ü—ñ–Ω—É –∞–±–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É
    base_price = base_prices.get(symbol, random.uniform(0.001, 100))
   
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ DataFrame –∑ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏
    timestamps = []
    opens = []
    highs = []
    lows = []
    closes = []
    volumes = []
   
    current_time = datetime.now()
    current_price = base_price
   
    # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
    if interval == "1h":
        interval_minutes = 60
    elif interval == "15m":
        interval_minutes = 15
    elif interval == "5m":
        interval_minutes = 5
    elif interval == "1m":
        interval_minutes = 1
    else:
        interval_minutes = 15  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
   
    for i in range(limit):
        # –ß–∞—Å –Ω–∞–∑–∞–¥
        time_ago = current_time - timedelta(minutes=interval_minutes * i)
        timestamps.append(time_ago)
       
        # –ü—Ä–∏—Ä–æ–¥–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å (¬±2% –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ)
        # 95% —á–∞—Å—É –∑–≤–∏—á–∞–π–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å ¬±2%, 5% —á–∞—Å—É —Å–∏–ª—å–Ω—ñ —Ä—É—Ö–∏ ¬±8%
        if random.random() < 0.05:  # 5% —à–∞–Ω—Å –Ω–∞ —Å–∏–ª—å–Ω–∏–π —Ä—É—Ö
            price_change = random.uniform(-0.08, 0.08)  # ¬±8% –¥–ª—è –ø–∞–º–ø—ñ–≤/–¥–∞–º–ø—ñ–≤
        else:
            price_change = random.uniform(-0.02, 0.02)  # ¬±2% –∑–≤–∏—á–∞–π–Ω–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å
        new_price = current_price * (1 + price_change)
       
        # OHLC –∑ –ø—Ä–∏—Ä–æ–¥–Ω–∏–º–∏ –∫–æ–ª–∏–≤–∞–Ω–Ω—è–º–∏
        open_price = current_price
        close_price = new_price
       
        # High/Low –∑ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
        high_price = max(open_price, close_price) * random.uniform(1.0, 1.015)  # +1.5% –º–∞–∫—Å–∏–º—É–º
        low_price = min(open_price, close_price) * random.uniform(0.985, 1.0)   # -1.5% –º–∞–∫—Å–∏–º—É–º
       
        opens.append(open_price)
        closes.append(close_price)
        highs.append(high_price)
        lows.append(low_price)
        # –û–±—Å—è–≥ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Å–ø–∞–π–∫—ñ–≤ –¥–ª—è vol_ratio
        if random.random() < 0.1:  # 10% —à–∞–Ω—Å –Ω–∞ –≤–∏—Å–æ–∫–∏–π –æ–±—Å—è–≥
            volumes.append(random.uniform(50000, 100000))  # –í–∏—Å–æ–∫–∏–π –æ–±—Å—è–≥ –¥–ª—è —Å–∏–≥–Ω–∞–ª—ñ–≤
        else:
            volumes.append(random.uniform(5000, 25000))  # –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π –æ–±—Å—è–≥
       
        current_price = close_price
   
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ DataFrame —É —Ñ–æ—Ä–º–∞—Ç—ñ —è–∫ —É MEXC API
    df = pd.DataFrame({
        'time_open': pd.to_datetime(timestamps[::-1]),  # –†–µ–≤–µ—Ä—Å –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥—ñ—á–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
        'open': opens[::-1],
        'high': highs[::-1],
        'low': lows[::-1],
        'close': closes[::-1],
        'volume': volumes[::-1]
    })
   
    return df

def build_chart_mplfinance(df_chart, pair, timeframe, save_path, title_extra="", rsi_val=50, last_price=0):
    """–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —É —Å—Ç–∏–ª—ñ –ë–µ—Ä–ª–æ–≥–∞ –∑ mplfinance + RSI"""
    try:
        if df_chart.empty or len(df_chart) < 20:
            print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—É {pair}")
            return
       
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è mplfinance
        chart_data = df_chart.copy()
       
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ time_open —è–∫ —ñ–Ω–¥–µ–∫—Å –¥–ª—è mplfinance
        if 'time_open' in chart_data.columns:
            chart_data.set_index('time_open', inplace=True)
       
        chart_data.rename(columns={
            "open": "Open",
            "high": "High",
            "low": "Low",
            "close": "Close",
            "volume": "Volume"
        }, inplace=True)
       
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ —ñ–Ω–¥–µ–∫—Å —î DatetimeIndex
        if not isinstance(chart_data.index, pd.DatetimeIndex):
            if 'time_open' in df_chart.columns:
                chart_data.index = pd.to_datetime(df_chart['time_open'])
            else:
                chart_data.index = pd.date_range(end=pd.Timestamp.now(), periods=len(chart_data), freq='5T')
       
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—é —è–∫ —É –ë–µ—Ä–ª–æ–≥–∞
        berloga_style = mpf.make_mpf_style(
            base_mpf_style="binance",
            rc={"font.size": 11},
            marketcolors=mpf.make_marketcolors(
                up="green", down="red",
                wick="white", edge="inherit",
                volume="inherit"
            )
        )
       
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSI
        rsi_period = 14
        delta = chart_data["Close"].diff()
        gain = delta.where(delta > 0, 0)
        loss = -delta.where(delta < 0, 0)
        avg_gain = gain.rolling(rsi_period).mean()
        avg_loss = loss.rolling(rsi_period).mean()
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
       
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –≥—Ä–∞—Ñ—ñ–∫–∏
        apds = [
            mpf.make_addplot(rsi, panel=1, color="orange", ylabel="RSI")
        ]
       
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        coin = pair.replace("USDT", "")
        title = f"{coin}/USDT, {timeframe} - RSI: {rsi_val:.1f}%, –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {last_price:.6f}"
       
        # –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
        mpf.plot(
            chart_data,
            type="candle",
            style=berloga_style,
            addplot=apds,
            volume=True,
            ylabel="–¶–µ–Ω–∞",
            ylabel_lower="–û–±—ä–µ–º",
            figratio=(16, 9),
            figscale=1.2,
            title=title,
            tight_layout=True,
            savefig=save_path
        )
       
        print(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ {pair} ({timeframe}) –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {save_path}")
       
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É {pair}: {e}")

def send_pump_signal(pair, price_change, rsi_val, vol_ratio, current_price, leverage, commission):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª—É –≤ Telegram"""
   
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –Ω–∞ –±—ñ—Ä–∂–∞—Ö
    mexc_available = "‚úÖ" if is_on_mexc_futures(pair) else "‚ùå"
    bybit_available = "‚úÖ" if is_on_bybit(pair) else "‚ùå"
   
    # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ
    entry_price = current_price
    stop_loss = current_price * 0.95  # 5% —Å—Ç–æ–ø-–ª–æ—Å—Å
    take_profit_1 = current_price * 1.10  # 10% —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç
    take_profit_2 = current_price * 1.20  # 20% —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç
   
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É
    profit_potential = ((take_profit_1 - entry_price) / entry_price) * leverage * 100 - (commission * 100 * 2)
   
    caption = f"""üöÄ <b>–ü–ê–ú–ü –°–ò–ì–ù–ê–õ!</b>

üí∞ <b>–ü–∞—Ä–∞:</b> #{pair.replace('USDT', '')}/{pair[-4:]}
üìà <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã:</b> +{price_change:.2f}%
üìä <b>RSI:</b> {rsi_val:.1f}
üìä <b>–û–±—ä—ë–º:</b> x{vol_ratio:.2f}
üíµ <b>–¶–µ–Ω–∞:</b> {current_price:.8f} USDT

üéØ <b>–¢–û–†–ì–û–í–´–ï –î–ê–ù–ù–´–ï:</b>
üìç <b>–í—Ö–æ–¥:</b> {entry_price:.8f} USDT
üõë <b>–°—Ç–æ–ø-–ª–æ—Å—Å:</b> {stop_loss:.8f} USDT (-5%)
üéØ <b>Take Profit 1:</b> {take_profit_1:.8f} USDT (+10%)
üöÄ <b>Take Profit 2:</b> {take_profit_2:.8f} USDT (+20%)
‚ö° <b>–ü–ª–µ—á–æ:</b> {leverage}x
üí∞ <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–∏–±—ã–ª–∏:</b> +{profit_potential:.1f}%

üè¢ <b>–î–û–°–¢–£–ü–ù–û–°–¢–¨ –ù–ê –ë–ò–†–ñ–ê–•:</b>
MEXC: {mexc_available} | ByBit: {bybit_available}

‚è∞ {datetime.now().strftime('%H:%M:%S UTC')}
ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ MEXC"""

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑ –≥—Ä–∞—Ñ—ñ–∫–æ–º
    if os.path.exists(CHART_FILE):
        send_telegram_photo(CHART_FILE, caption)
    else:
        print("‚ùå –§–∞–π–ª –≥—Ä–∞—Ñ—ñ–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç")

def is_on_mexc_futures(pair):
    try:
        r = requests.get(MEXC_FUTURES_URL, timeout=10).json()
        if r.get("success"):
            for c in r.get("data", []):
                symbol_formatted = pair.replace("USDT", "_USDT")
                if (c.get("symbol") == symbol_formatted and
                    c.get("displayNameEn", "").endswith("PERPETUAL")):
                    return True
    except Exception as e:
        print(f"Err checking MEXC futures for {pair}: {e}")
    return False

def is_on_bybit(pair):
    try:
        r = requests.get(BYBIT_SYMBOLS_URL, timeout=8).json()
        if isinstance(r, dict) and "result" in r:
            for item in r["result"]:
                s = item.get("symbol", "")
                if not s:
                    continue
                if s.upper() == pair.upper() or s.upper() == pair.replace("USDT", "").upper() + "USDT":
                    return True
    except Exception as e:
        print(f"Err checking ByBit for {pair}: {e}")
    return False

def send_telegram_photo(photo_path, caption):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    try:
        with open(photo_path, "rb") as p:
            files = {"photo": p}
            data = {"chat_id": CHAT_ID, "caption": caption, "parse_mode": "HTML"}
            resp = requests.post(url, files=files, data=data, timeout=20)
            resp.raise_for_status()
            print(f"‚úÖ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
           
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def wait_for_internet():
    """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è"""
    print("üåê –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è...")
    while True:
        try:
            requests.get("https://api.mexc.com", timeout=5)
            print("‚úÖ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            break
        except:
            time.sleep(5)
            continue

def auto_restart_main():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    attempt = 1
    max_attempts = 10
   
    while attempt <= max_attempts:
        try:
            print(f"üöÄ –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É #{attempt}")
            main()
            break
        except KeyboardInterrupt:
            print("‚èπÔ∏è –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ #{attempt}: {e}")
            if attempt < max_attempts:
                wait_time = min(60 * attempt, 300)  # –ú–∞–∫—Å–∏–º—É–º 5 —Ö–≤–∏–ª–∏–Ω
                print(f"‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                time.sleep(wait_time)
                attempt += 1
            else:
                print("üõë –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º —Å–ø—Ä–æ–± –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É")
                break

if __name__ == "__main__":
    wait_for_internet()
    auto_restart_main()
